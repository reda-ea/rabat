// Generated by CoffeeScript 1.10.0
(function() {
  var $controller, $defaults, $router, Application, OPTTYPES, _, bluebird, connect, debug, defaultOptions, forOrdered, http, parsespecs, registeredPackages,
    slice = [].slice;

  _ = require('lodash');

  bluebird = require('bluebird');

  connect = require('connect');

  http = require('http');

  debug = (require('debug'))('rabat:application');

  $controller = require('./controller');

  $router = require('./router');

  $defaults = require('./defaults');

  OPTTYPES = ['$middlewares', '$extensions', '$formatters', '$policies'];

  forOrdered = function(obj, cb) {
    var i, k, keys, len, results;
    keys = _.sortBy(_.keysIn(obj));
    results = [];
    for (i = 0, len = keys.length; i < len; i++) {
      k = keys[i];
      results.push(cb(obj[k], k));
    }
    return results;
  };

  defaultOptions = {};

  parsespecs = function(specs, options, prefix) {
    var ctrl, paths;
    if (options == null) {
      options = defaultOptions;
    }
    if (prefix == null) {
      prefix = '';
    }
    debug('processing paths for %s', prefix || '[root]');
    specs._rabat_prefix = prefix;
    paths = _.pick(specs, function(v, k) {
      var ref, ref1;
      return ((ref = typeof v) === 'object' || ref === 'function') && ((ref1 = k[0]) !== '$' && ref1 !== '_');
    });
    OPTTYPES.forEach(function(o) {
      if (options[o] == null) {
        options[o] = specs[o] || {};
      }
      options[o] = _.assign(options[o], specs[o]);
      return options[o] = _.pick(options[o], function(v) {
        return v != null;
      });
    });
    ctrl = new $controller;
    forOrdered(options.$extensions, function(h, n) {
      h._name = n;
      return ctrl.extend(n, h);
    });
    forOrdered(options.$formatters, function(h, n) {
      h._name = n;
      return ctrl.extend(h);
    });
    return _.mapValues(paths, function(handler, name) {
      var app, policies;
      if (typeof handler === 'object') {
        return parsespecs(handler, _.cloneDeep(options), prefix + '/' + name);
      } else {
        debug('processing handler %s', name);
        app = new connect;
        app._name = name;
        forOrdered(options.$middlewares, function(h, n) {
          debug('using middleware %s', n);
          h._name = n;
          return app.use(function(req, res, next) {
            debug('running middleware %s', n);
            return h(req, res, next);
          });
        });
        handler._name = name;
        policies = forOrdered(options.$policies, function(h, n) {
          return _.extend(h, {
            _name: n
          });
        });
        if (policies.length) {
          policies.push(handler);
          handler = policies;
        }
        return app.use(ctrl(handler));
      }
    });
  };

  Application = (function() {
    Application.prototype._rabat_object = 'application';

    function Application(specs1) {
      var key, self, value;
      this.specs = specs1 != null ? specs1 : {};
      debug('new application');
      self = new $router(parsespecs(this.specs));
      for (key in this) {
        value = this[key];
        self[key] = value;
      }
      return self;
    }

    Application.prototype.extend = function() {
      var newspecs, packages;
      packages = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      packages = packages.map(function(p) {
        if (typeof p === 'object') {
          return p;
        } else {
          return registeredPackages[p];
        }
      });
      newspecs = _.pick(this.specs, function(v, k) {
        var ref;
        return ((ref = typeof v) === 'object' || ref === 'function') && k[0] !== '$';
      });
      OPTTYPES.forEach((function(_this) {
        return function(o) {
          var i, len, p;
          newspecs[o] = {};
          _.assign(newspecs[o], _this.specs[o]);
          for (i = 0, len = packages.length; i < len; i++) {
            p = packages[i];
            if (p[o]) {
              _.assign(newspecs[o], p[o]);
            }
          }
          return newspecs[o] = _.pick(newspecs[o], function(v) {
            return v != null;
          });
        };
      })(this));
      return new Application(newspecs);
    };

    Application.prototype.listen = function(port) {
      return new bluebird((function(_this) {
        return function(resolve, reject) {
          var server;
          server = http.createServer(_this);
          server.listen(port, resolve);
          return server.on('error', reject);
        };
      })(this));
    };

    return Application;

  })();

  registeredPackages = {};

  Application.register = function(name, pkg) {
    return registeredPackages[name] = pkg;
  };

  _.forOwn($defaults, function(pkg, name) {
    if (typeof pkg !== 'object') {
      return;
    }
    Application.register(name, pkg);
    return _.merge(defaultOptions, pkg);
  });

  module.exports = Application;

}).call(this);
