// Generated by CoffeeScript 1.10.0
(function() {
  var Response, _, bluebird, debug, finalhandler, mime,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  bluebird = require('bluebird');

  debug = (require('debug'))('rabat:response');

  mime = require('mime');

  finalhandler = require('finalhandler');

  Response = (function() {
    Response.prototype._rabat_object = 'response';

    function Response(error, reply) {
      this.send = bind(this.send, this);
      var ref;
      this.custom = function(req, res, next) {
        return next();
      };
      this.auto = false;
      this.error = error != null;
      this.status = error != null ? 500 : 200;
      this.type = 'html';
      this.headers = {
        'X-Powered-By': 'Rabat'
      };
      if (reply == null) {
        reply = error;
      }
      if (reply == null) {
        debug('new default response');
        return;
      }
      this.custom = false;
      if ((reply != null ? reply._rabat_object : void 0) === 'response') {
        _.assign(this, reply);
        return;
      }
      this.auto = true;
      if (error != null) {
        debug('got error %s', (ref = error != null ? error.stack : void 0) != null ? ref : error);
      }
      if (typeof reply === 'object') {
        debug('defaulting to json response');
        this.type = 'json';
        this.body = JSON.stringify(reply);
      } else if (typeof reply === 'function') {
        debug('defaulting to custom response');
        this.custom = reply;
      } else {
        debug('defaulting to text response');
        this.type = 'text';
        this.body = _(reply).toString();
      }
    }

    Response.prototype.send = function(req, res, next) {
      var contentlength, contenttype;
      if (this.custom) {
        debug('sending custom repsonse');
        if (typeof next !== 'function') {
          next = finalhandler(req, res);
        }
        return this.custom(req, res, next);
      }
      contenttype = mime.lookup(this.type);
      debug('sending %s, %s response', this.status, contenttype);
      res.statusCode = this.status;
      res.setHeader('Content-Type', contenttype);
      _.forEach(this.headers, function(v, k) {
        return res.setHeader(k, v);
      });
      if (this.body != null) {
        contentlength = Buffer.byteLength(this.body);
        debug('...with body length %s', contentlength);
        res.setHeader('Content-Length', contentlength);
        res.write(this.body);
      }
      return res.end();
    };

    return Response;

  })();

  module.exports = Response;

}).call(this);
