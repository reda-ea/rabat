// Generated by CoffeeScript 1.10.0
(function() {
  var $config, $response, _, bluebird, callsite, cons, debug, glob;

  _ = require('lodash');

  bluebird = require('bluebird');

  glob = require('glob');

  cons = require('consolidate');

  callsite = require('callsite');

  debug = (require('debug'))('rabat:view');

  $response = require('./response');

  $config = (require('./config'))('rabat.views');

  $config.set('path', '.', 'the base path to look for non local views (relative or absolute)');

  $config.set('engine', 'lodash', 'the engine to use for templates with no file extension');

  module.exports = {
    $extensions: {
      view: function(req, res) {
        var defaultpath;
        defaultpath = req.rabat.context;
        return function(path, data) {
          var callerfile, fullpath, pathprefix;
          if (path == null) {
            path = '';
          }
          pathprefix = $config.get('path');
          if (data == null) {
            data = path || {};
            path = '';
          }
          if (!path) {
            debug('no path specified, guessing default');
            path = '/' + defaultpath.join('/');
          }
          if (path.slice(0, 2) === './') {
            debug('local path specified');
            callerfile = (callsite())[1].getFileName();
            path = ((require('path')).dirname(callerfile)) + path.slice(1);
            pathprefix = '';
          }
          if (path[0] !== '/') {
            debug('relative path specified');
            path = (defaultpath.slice(0, -1).join('/')) + '/' + path;
          }
          if (path[0] !== '/') {
            path = '/' + path;
          }
          fullpath = pathprefix + path;
          return (bluebird.promisify(glob))(fullpath + '.*').then(function(files) {
            var fileinfo;
            fileinfo = files.map(function(file) {
              var engine, ext, output;
              ext = file.slice(fullpath.length + 1).split('.');
              if (!ext.length) {
                ext = [$config.get('engine')];
              }
              engine = ext[ext.length - 1];
              if (typeof cons[engine] !== 'function') {
                return null;
              }
              output = 'html';
              if (ext.length > 1) {
                output = ext[ext.length - 2];
              }
              return {
                name: file,
                engine: engine,
                output: output
              };
            }).filter(_.identity)[0];
            if (!fileinfo) {
              debug('no template file found: %s.*', fullpath);
              throw _.extend(new Error('Template "' + fullpath + '.*" not found'), {
                _rabat_error: 'TEMPLATE_NOT_FOUND'
              });
            }
            debug('%s generating %s from %s', fileinfo.engine, fileinfo.output, fileinfo.name);
            return [fileinfo.output, cons[fileinfo.engine](fileinfo.name, _.clone(data))];
          }).spread(function(output, content) {
            if (content == null) {
              content = '';
            }
            return _.assign(new $response(null, content), {
              type: output
            });
          });
        };
      }
    },
    $formatters: {
      '01-view': function(resp) {
        if (resp.type === 'json' && resp.auto && !resp.error) {
          debug('auto JSON response, attempting to render...');
          return this.view(JSON.parse(resp.body)).then(function(viewresp) {
            debug('implicit template found, sending view');
            return viewresp;
          })["catch"](function(e) {
            if (e._rabat_error === 'TEMPLATE_NOT_FOUND') {
              debug('implicit render failed, returning JSON');
              return resp;
            } else {
              throw e;
            }
          });
        }
      }
    }
  };

}).call(this);
