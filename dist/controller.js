// Generated by CoffeeScript 1.10.0
(function() {
  var $response, Controller, _, _fname, bluebird, connect, debug, reflekt,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  bluebird = require('bluebird');

  _ = require('lodash');

  connect = require('connect');

  reflekt = require('reflekt');

  debug = (require('debug'))('rabat:controller');

  $response = require('./response');

  _fname = function(fn) {
    return fn._name || fn.name;
  };

  Controller = (function() {
    Controller.prototype._rabat_object = 'controller';

    function Controller() {
      this.wrap = bind(this.wrap, this);
      this.extend = bind(this.extend, this);
      var key, self, value;
      debug('new controller');
      this.extensions = {};
      this.formatters = [];
      self = this.wrap;
      for (key in this) {
        value = this[key];
        if (key !== 'wrap') {
          self[key] = value;
        }
      }
      return self;
    }

    Controller.prototype.extend = function(property, getter) {
      if (getter != null) {
        debug('adding extension %s', property);
        if (this.extensions[property] != null) {
          throw new Error('Extension "' + property + '" already loaded');
        }
        this.extensions[property] = getter;
      } else {
        debug('adding formatter %s', _fname(property));
        this.formatters.push(property);
      }
      return this;
    };

    Controller.prototype.wrap = function(handler) {
      var chdlr, cname;
      if (_.isArray(handler)) {
        cname = (handler.map(_fname)).join();
        debug('wrapping action chain %s', cname);
        chdlr = handler.reduce((function(_this) {
          return function(app, step) {
            return app.use(_this.wrap(step));
          };
        })(this), _.extend(new connect, {
          _name: cname
        }));
        return function(req, res, next) {
          debug('running chain %s', cname);
          return chdlr(req, res, next);
        };
      }
      debug('wrapping action %s', _fname(handler));
      return (function(_this) {
        return function(req, res, next) {
          var base;
          debug('action called %s', _fname(handler));
          if (req.rabat == null) {
            req.rabat = {};
          }
          if ((base = req.rabat).params == null) {
            base.params = {};
          }
          debug('loading extensions %s', (_.keysIn(_this.extensions)).join());
          return bluebird.props(_.mapValues(_this.extensions, function(g, k) {
            return g.call(this, req, res);
          })).then(function(context) {
            var callFormatter, handleReply, params, ref, reply;
            context = _.pick(context, function(v, k) {
              return k[0] !== '_';
            });
            params = _.cloneDeep((ref = req.rabat.params) != null ? ref : {});
            reply = bluebird.method(function() {
              debug('running handler %s', _fname(handler));
              return reflekt.call(handler, params, context);
            })();
            handleReply = function(r) {
              return r.then(function(val) {
                return new $response(null, val);
              })["catch"](function(err) {
                return bluebird.resolve(err).then(function(err) {
                  return new $response(err);
                });
              });
            };
            callFormatter = function(f, r) {
              return bluebird.resolve(f.call(context, r)).then(function(val) {
                return val != null ? val : r;
              });
            };
            return bluebird.reduce(_this.formatters, function(r, f) {
              debug('applying formatter %s', _fname(f));
              return handleReply(callFormatter(f, r));
            }, handleReply(reply)).then(function(resp) {
              debug('final response %s', resp.custom && 'custom' || resp.status);
              return resp.send(req, res, next);
            });
          });
        };
      })(this);
    };

    return Controller;

  })();

  module.exports = Controller;

}).call(this);
