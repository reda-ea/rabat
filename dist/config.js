// Generated by CoffeeScript 1.10.0
(function() {
  var Configurator, _, config, defaultValues, descriptions, flat,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  process.env.SUPPRESS_NO_CONFIG_WARNING = 'y';

  _ = require('lodash');

  config = require('config');

  flat = require('flat');

  defaultValues = {};

  descriptions = {};

  Configurator = (function() {
    function Configurator(scope1) {
      var key, self, value;
      this.scope = scope1 != null ? scope1 : '';
      this.get = bind(this.get, this);
      this.set = bind(this.set, this);
      self = (function(_this) {
        return function(scope) {
          return new Configurator(_this.scope + scope + '.');
        };
      })(this);
      for (key in this) {
        value = this[key];
        self[key] = value;
      }
      return self;
    }

    Configurator.prototype.set = function(name, value, desc) {
      var vname;
      if (!(name && (value != null))) {
        throw 'name and value required';
      }
      vname = this.scope + name.toLowerCase();
      defaultValues[vname] = value;
      if (desc) {
        descriptions[vname] = desc;
      }
      return _.forOwn(flat.unflatten(defaultValues), function(v, k) {
        return config.util.setModuleDefaults(k, v);
      });
    };

    Configurator.prototype.get = function(name) {
      var vname;
      vname = this.scope + name.toLowerCase();
      return config.get(vname);
    };

    return Configurator;

  })();

  module.exports = new Configurator;

  module.exports.desc = function() {
    return flat.unflatten(_.mapValues(defaultValues, function(v, k) {
      if (typeof v === 'object') {
        v = JSON.stringify(v);
      }
      return ((descriptions[k] + ' ') || '') + '(default: ' + v + ')';
    }));
  };

}).call(this);
