// Generated by CoffeeScript 1.10.0
(function() {
  var Model, _, _delegate, _populate, bluebird, debug, defaultData, defaultSpecs;

  _ = require('lodash');

  bluebird = require('bluebird');

  debug = (require('debug'))('rabat:model');

  defaultData = [];

  defaultSpecs = {
    init: function() {
      this.tid = defaultData.length;
      return defaultData.push([]);
    },
    get: function(id) {
      return _.cloneDeep(defaultData[this.tid][id] || null);
    },
    query: function(params) {
      return _.cloneDeep(_.filter(defaultData[this.tid].filter(_.identity), _.matches(params)));
    },
    save: function(rec) {
      if (rec.id) {
        defaultData[this.tid][rec.id] = rec;
      } else {
        rec.id = defaultData[this.tid].length;
        defaultData[this.tid].push(rec);
      }
      return rec;
    },
    remove: function(rec) {
      var oldrec;
      if (!rec.id) {
        return null;
      }
      oldrec = defaultData[this.tid][rec.id];
      defaultData[this.tid][rec.id] = null;
      return oldrec;
    }
  };

  _delegate = function(self, method, args) {
    var methodf;
    if (args == null) {
      args = [];
    }
    methodf = self.specs[method];
    if (typeof methodf !== 'function') {
      methodf = defaultSpecs[method];
      debug('...using default method');
    }
    return new bluebird(function(resolve) {
      return resolve(methodf.apply(self, args));
    });
  };

  _populate = function(self, rec, fields, specs) {
    return bluebird.props(_.mapValues(fields, function(subfields, field) {
      return new bluebird(function(resolve) {
        debug('populating field %s of record %s', field, rec.id);
        return resolve(specs[field].call(self, rec, subfields));
      });
    })).then(function(populated) {
      return _.extend(rec, populated);
    });
  };

  Model = (function() {
    function Model(specs1) {
      this.specs = specs1 != null ? specs1 : {};
      debug('initializing model %s', this.specs._name || this.specs.name);
      _delegate(this, 'init');
    }

    Model.prototype.find = function(id, populate) {
      var method;
      if (id == null) {
        id = {};
      }
      if (populate == null) {
        populate = {};
      }
      method = _.isObject(id) ? 'query' : 'get';
      debug('%s from model %s', method, this.specs._name || this.specs.name);
      return _delegate(this, method, [id]).then((function(_this) {
        return function(res) {
          if (method === 'get') {
            return _populate(_this, res, populate, _this.specs.populate || defaultSpecs.populate);
          } else if (method === 'query') {
            return bluebird.map(res, function(rec) {
              return _populate(_this, rec, populate, _this.specs.populate || defaultSpecs.populate);
            });
          }
        };
      })(this));
    };

    Model.prototype.save = function(rec) {
      if (rec == null) {
        rec = {};
      }
      debug('saving to model %s', this.specs._name || this.specs.name);
      return _delegate(this, 'save', [rec]);
    };

    Model.prototype.remove = function(rec) {
      if (rec == null) {
        rec = {};
      }
      debug('removing from model %s', this.specs._name || this.specs.name);
      return _delegate(this, 'remove', [rec]);
    };

    return Model;

  })();

  module.exports = Model;

  module.exports._getMemoryStore = function() {
    return defaultData;
  };

}).call(this);
